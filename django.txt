
python + Django 项目创建及配置
1  // 安装django
pip install django
2  // 创建项目
django-admin startproject ttsx

3 // 创建应用 (工具pychram 中 Terminal)
python manage.py startapp goods  // goods 商品应用
python manage.py startapp cart // cart 购物车应用


4 // 添加应用到setting.py中
INSTALLER_APPS = {
	....

	'goods',
	'cart'
}

5 // 启动项目(默认端口8000)
python manage.py runserver 


// 数据库配置
1 在__init__.py 添加
import pymysql
pymysql.install_as_MySQLdb()

2 // setting.py 配置数据库信息
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',// 这里改成mysql
        'NAME': 'ttsx',
        'HOST':'localhost',
        'USER':'root',
        'PASSWORD':'123456',
        'PORT':'3306'
    }
}



good_id = request.GET.get('id',1) // 设置默认为1
  

prev_url = request.META['HTTP_REFERER']

response = redirect(prev_url) //获取response

page = request.GET.get('page', 1)
pagi = paginator(data,20)
page_data = pagi.page(page)



python 

取出xlsx数据后  都是str类型   '{'username':'www', 'password':'123456'}'  
如果需要转成dict   使用eval有效   json.loads()必须是双引号才行  单引号会报错

传参数问题 post为例
前端用json=data的话   python 后端要从 request.body 中取数据

前端用data=data的话   
   1 如果headers中 content-type: application/json
    python 后端要从 request.body 中取数据

   2 如果headers中 content-type: application/x-www-form-urlencoded
   python 后端要从 request.POST.get 中取数据








自动生成依赖清单
pip install pipreqs

生成清单
pipreqs

用法：
pip3 install -r /django/django_demo/requriements.txt


uwsgi怎么启动停止
## 二、启动停止重启

uWSGI 通过 xxx.ini 启动后会在相同目录下生成一个 xxx.pid 的文件，里面只有一行内容是 uWSGI 的主进程的进程号。

uWSGI 启动：
uwsgi --ini xxx.ini


uwsgi 重启：
uwsgi --reload xxx.pid

uwsgi 停止：
uwsgi --stop xxx.pid


如果不行，执行
pkill -f uwsgi -9



uwsgi 部署django项目==========================================================================================================

静态资源收集 
1  找到setting.py  底部增加 STATIC_ROOT='/django/django_demo/static_file'

2 项目根目录执行  python3 manage.py collectstatic


1 在项目下创建uwsgi.ini  输入:
[uwsgi]
http=192.168.116.128:8000
chdir=/django/django_demo
wsgi-file=django_demo/wsgi.py
processes=4
threads=2
master=true
pidfile=uwsgi.pid
daemonize=uwsgi.log
static-map=/static=static_file # 静态资源


3 uwsgi --ini uwsgi.ini   # 启动命令

4 浏览器访问 192.168.116.128:8000





uwsgi + nginx 部署django项目==========================================================================================================

1 在项目下创建uwsgi.ini  输入:
[uwsgi]
socket=127.0.0.1:8000
chdir=/django/django_demo
wsgi-file=django_demo/wsgi.py
processes=4
threads=2
master=true
pidfile=uwsgi.pid
daemonize=uwsgi.log


2 uwsgi --ini uwsgi.ini   # 启动命令

3 nginx.conf配置 新增

server {
  listen 80;
  server_name 192.168.116.129;

  location / {
    include uwsgi_params;
    uwsgi_pass 127.0.0.1:8000;
  }

  #配置静态文件服务器
  location /static {
    alias /django/django_demo/static_file
  }
}

4 nginx -s reload

5 浏览器访问 192.168.116.129








uwsgi + nginx 分布式部署django项目==========================================================================================================
分类：
  单服务器模式[伪分布式]
  多服务器模式[分布式集群]


单服务器模式   部署多个项目

项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 项目1 
1 在项目下创建uwsgi.ini  输入:
[uwsgi]
http=127.0.0.1:8000
chdir=/django/django_demo
wsgi-file=django_demo/wsgi.py
processes=4
threads=2
master=true
pidfile=uwsgi.pid
daemonize=uwsgi.log

2 uwsgi --ini uwsgi.ini   # 启动命令


项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 项目2 
1 在项目下创建uwsgi.ini  输入:
[uwsgi]
http=127.0.0.1:8002
chdir=/django/django_demo2
wsgi-file=django_demo/wsgi.py
processes=4
threads=2
master=true
pidfile=uwsgi.pid
daemonize=uwsgi.log

2 uwsgi --ini uwsgi.ini   # 启动命令


项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 项目3 
1 在项目下创建uwsgi.ini  输入:
[uwsgi]
http=127.0.0.1:8003
chdir=/django/django_demo3
wsgi-file=django_demo/wsgi.py
processes=4
threads=2
master=true
pidfile=uwsgi.pid
daemonize=uwsgi.log

2 uwsgi --ini uwsgi.ini   # 启动命令




3 nginx.conf配置 新增

# 负载均衡服务器
upsteam myweb {
  server 127.0.0.1:8000;
  server 127.0.0.1:8002;
  server 127.0.0.1:8003;
}

server {
  listen 80;
  server_name 192.168.116.129;

  location / {
    proxy_pass http://myweb;
  }

  #配置静态文件服务器
  location /static {
    alias /django/django_demo/static_file
  }
}

4 nginx -s reload

5 浏览器访问 192.168.116.129




























